#include <iostream>
#include <map>
#include <utility>
#include <vector>
#include <cstdlib>
#include <unordered_set>


using namespace std;

struct UndirectedGraphNode {
	int label;
	vector<UndirectedGraphNode *> neighbors;
	UndirectedGraphNode(int x = 0) : label(x) {};
};

typedef map<UndirectedGraphNode *, UndirectedGraphNode *> NodeList;

typedef unordered_set<UndirectedGraphNode *> Visited;

void disp(UndirectedGraphNode *node, Visited &vis) {
	if (!node) return;

	cerr << node->label << ' ';

	for (vector<UndirectedGraphNode *>::iterator it = node->neighbors.begin();
		it != node->neighbors.end(); it++) {

		cerr << (*it)->label << ' ';
	}

	cerr << endl;

	vis.insert(node);

	for (vector<UndirectedGraphNode *>::iterator it = node->neighbors.begin();
		it != node->neighbors.end(); it++) {
		
		if (vis.find(*it) == vis.end())
			disp(*it, vis);
	}
}

void display(UndirectedGraphNode *node){
	Visited vis;
	
	disp(node, vis);
}

class Solution {

	NodeList lst;

	UndirectedGraphNode *clone(UndirectedGraphNode *node, NodeList &lst) {
		if (!node) return NULL;

		UndirectedGraphNode *new_node = new UndirectedGraphNode(node->label);
		lst.insert( make_pair(node, new_node) );

		vector<UndirectedGraphNode *>::iterator it;

		for (it = node->neighbors.begin(); it != node->neighbors.end(); it++) {
			NodeList::iterator f_it = lst.find(*it);

			if (f_it == lst.end()) {
				new_node->neighbors.push_back( clone(*it, lst) );
			}
			else {
				new_node->neighbors.push_back(f_it->second);
			}
		}

		return new_node;
	}

	public:
	UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
		return clone(node, lst);
	}
};

int main() {
	int n;
	int label;
	int neighbor;

	cin >> n;

	UndirectedGraphNode *node = new UndirectedGraphNode [n];

	int idx = 0;
	while (idx < n) {
		cin >> label;

		node[idx].label = label;

		cin >> neighbor;

		while (neighbor != -1) {
			node[idx].neighbors.push_back(&node[neighbor]);

			cin >> neighbor;
		}

		idx ++;
	}

	cerr << "original" << endl;
	display(node);
	cerr << "copy" << endl;

	Solution s;
	UndirectedGraphNode *new_node = s.cloneGraph(node);
	display(new_node);

	return 0;
}
