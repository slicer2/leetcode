#include <iostream>
#include <sstream>
#include <string>

using namespace std;

struct ListNode {
	int val;
	ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
};

class Solution {
	public:
		ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
			ListNode *l = new ListNode (0);
			ListNode *p = l;

			while (l1 != NULL || l2 != NULL) {
				if (l1 == NULL) {
					p->next = l2;
					//cerr << "p->next->val = " << p->next->val << endl;
					p = l;
					l = l->next;
					delete p;

					return l;
				}
				else
					if (l2 == NULL) {
						p->next = l1;
						//cerr << "p->next->val = " << p->next->val << endl;
						p = l;
						l = l->next;
						delete p;

						return l;
					}
					else {
						if (l1->val < l2->val) {
							p->next = l1;
							p = p->next;
							//cerr << "p->val = " << p->val << endl;
							l1 = l1->next;
						}
						else {
							p->next = l2;
							p = p->next;
							//cerr << "p->val = " << p->val << endl;
							l2 = l2->next;
						}
					}
			}

			p = l;
			l = l->next;
			delete p;

			return l;
		}
};

int main() {
	ListNode *l1 = NULL, *l2 = NULL;
	int n;
	string s;

	getline(cin, s);

	stringstream ss1(s);

	while (ss1 >> n) {
		ListNode *p = new ListNode (n);
		p->next = l1;
		l1 = p;
	}

	getline(cin, s);

	stringstream ss2(s);

	while (ss2 >> n) {
		ListNode *p = new ListNode (n);
		p->next = l2;
		l2 = p;
	}

	Solution sol;

	ListNode *l = sol.mergeTwoLists(l1, l2);

	for (ListNode *p = l; p != NULL; p = p->next)
		cout << p->val << ' ';

	cout << endl;

	return 0;
}
