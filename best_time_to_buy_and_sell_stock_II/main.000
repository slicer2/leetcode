#include <iostream>
#include <vector>

using namespace std;

class Solution {
	public:
		int maxProfit(vector<int> &prices) {

			//vector<int> max_profit1(prices.size()), max_profit2(prices.size());
			//vector<int> prev_sell_day2(prices.size());

			if (prices.size() <= 1)
				return 0;

			int lowest_day = 0;
			int max_profit1 = 0, max_profit2 = 0;
			
			/* comb_day  is a day after prev_sell_day2 but before current day i, where
			   where the max_profit1 (on the previous day) - prices[comb] is maxmimized */
			int comb = 0, comb_day = -1;

			int prev_sell_day1 = -1, prev_sell_day2 = -1;


			//cout << "i" << '\t' << "price" << '\t' << "ps_day2" << '\t' << "comb" << '\t' << "c_day" << '\t' <<
			//	"max2" << '\t' << "l_day" << '\t' << "lowest" << '\t' << "ps_day1" << '\t' << "max1" << endl;

			for (int i=1; i<(int)prices.size(); i++) {

				/* update for 2 buy and 2 sell */
				/* if we had a profitable 2 sell already */
				if (prev_sell_day2 > -1) {
					int profit2_1 = -1;

					/* potential 2 sell: same buying day for second trasaction, sell on day i */
					if (prices[i] > prices[prev_sell_day2])
						profit2_1 = max_profit2 + (prices[i] - prices[prev_sell_day2]);

					/* if there is a chance to construct a 2 sell by one transaction before (including) prev_sell_day2
					   and one transaction after prev_sell_day2 where sell is on day i*/
					if (comb_day > -1) {
						int profit2_2 = comb + prices[i];

						if (profit2_1 > max_profit2 || profit2_2 > max_profit2) {
							if (profit2_1 > profit2_2)
								max_profit2 = profit2_1;
							else
								max_profit2 = profit2_2;

							prev_sell_day2 = i;
							comb_day = -1;
						}
						else {
							if (max_profit1 - prices[i] > comb) {
								comb = max_profit1 - prices[i];
								comb_day = i;
							}
						}
					}
					else {
						if (profit2_1 > max_profit2) {
							max_profit2 = profit2_1;
							prev_sell_day2 = i;

							comb_day = -1;
						}
						else {
							comb = max_profit1 - prices[i];
							comb_day = i;
						}
					}
				}
				/* if no previous profitable 2 sell, see if this is the chance to do a profitable 
				   2 sell for the first time */
				else {
					if (prev_sell_day1 > -1 && prev_sell_day1 < i-1 && prices[i] > prices[i-1]) {
						max_profit2 = max_profit1 + prices[i] - prices[i-1];
						prev_sell_day2 = i;
					}
				}

				/* update for 1 buy and 1 sell */

				if (prices[i] < prices[lowest_day]) 
					lowest_day = i;
				else
					if (prices[i] - prices[lowest_day] > max_profit1) {
						max_profit1 = prices[i] - prices[lowest_day];
						prev_sell_day1 = i;
					}


				//cout << i << '\t' << prices[i] << '\t' << prev_sell_day2 << '\t' << comb << '\t' << comb_day << '\t' <<
				//	max_profit2 << '\t' << lowest_day << '\t' << prices[lowest_day] << '\t' << prev_sell_day1 << '\t' << max_profit1 << endl;
			}

			if (prev_sell_day2 > -1) {
				if (lowest_day > -1) {
					if (max_profit2 > max_profit1)
						return max_profit2;
					else
						return max_profit1;
				}
				return max_profit2;
			}
			else {
				if (lowest_day > -1)
					return max_profit1;
				else
					return 0;
			}
		}
};

int main() {
	int p;
	vector<int> prices;

	while (cin >> p)
		prices.push_back(p);

	Solution sol;

	cout << sol.maxProfit(prices) << endl;

	return 0;
}
