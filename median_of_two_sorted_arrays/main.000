#include <iostream>
#include <cassert>
#include <algorithm>
#include <limits>

using namespace std;

class Solution {
	public:
		double findMedianSortedArrays(int A[], int m, int B[], int n) {
			int *A1;
			bool modified = false;
			if ( (m+n) % 2 == 0) {
				A1 = new int [m+1];
				copy(A, A+m, A1);
				A1[m] = numeric_limits<int>::max();
				m = m+1;

				int *t = A;
				A = A1;
				A1 = t;
				modified = true;
			}

			//for (int i=0; i<m; i++)
			//	cout << A[i] << ' ';
			//cout << endl;


			//for (int i=0; i<n; i++)
			//	cout << B[i] << ' ';
			//cout << endl;

			int start_A = 0, start_B = 0, len_A = m, len_B = n, mid_A, mid_B;
			double result;
			int nToRight, nToLeft;
			int cutRightA = 0, cutRightB = 0, cutLeftA = 0, cutLeftB = 0;
			int half_len = (m+n)/2;


			//cerr << "total_len = " << m+n << '\t' << "to left/right = " << half_len << endl;

			//cerr << "s_A" << '\t' << "l_A" << '\t' << "m_A" << '\t' << "mAVal" << '\t' << "cLA" << '\t' << "cRA" << '\t' << "s_B" << '\t' << "l_B" << '\t' << "m_B" << '\t' << "mBVal" << '\t' << "cLB" << '\t' << "cRB" << '\t' << "toL" << '\t' << "toR" << endl;
			while (len_A != 0 && len_B != 0) {
				mid_A = start_A + len_A/2;
				mid_B = start_B + len_B/2;


				nToRight = m - (mid_A+1) + n - (mid_B+1);
				nToLeft = mid_A + mid_B;

				if (A[mid_A] > B[mid_B]) {
					if (nToRight < half_len) {
						len_A = mid_A - start_A;
						cutRightA = m - mid_A;
					}
					else
						if (nToRight == half_len) {
							len_A = mid_A - start_A + 1;
							cutRightA = m - (mid_A + 1);
						}

					if (nToLeft < half_len) {
						int t_start_B = start_B;
						start_B = mid_B+1;
						cutLeftB = mid_B+1;
						len_B = len_B - (mid_B-t_start_B+1);
					}
					else
						if (nToLeft == half_len) {
							int t_start_B = start_B;
							start_B = mid_B;
							cutLeftB = mid_B;
							len_B = len_B - (mid_B-t_start_B);
						}
				}
				else {
					if (nToRight < half_len) {
						len_B = mid_B - start_B;
						cutRightB = n - mid_B;
					}
					else
						if (nToRight == half_len) {
							len_B = mid_B - start_B + 1;
							cutRightB = n - (mid_B+1);
						}

					if (nToLeft < half_len) {
						int t_start_A = start_A;
						start_A = mid_A+1;
						cutLeftA = mid_A+1;
						len_A = len_A - (mid_A-t_start_A+1);
					}
					else
						if (nToLeft == half_len) {
							int t_start_A = start_A;
							start_A = mid_A;
							cutLeftA = mid_A;
							len_A = len_A - (mid_A-t_start_A);
						}
				}

				//cerr << start_A << '\t' << len_A << '\t' << mid_A << '\t' << A[mid_A] << '\t' << cutLeftA << '\t' << cutRightA << '\t' << start_B << '\t' << len_B << '\t' << mid_B << '\t' << B[mid_B] << '\t' << cutLeftB << '\t' << cutRightB << '\t' << nToLeft << '\t' << nToRight << endl;

				assert(cutLeftA == start_A && cutLeftB == start_B && cutRightA == m-(start_A+len_A) && cutRightB == n-(start_B+len_B));

			}

			if (len_A > 0) {
				int result_idx = half_len - cutLeftB;
				if (modified)
					if (A[result_idx-1] > B[cutLeftB-1])
						result = (A[result_idx]+A[result_idx-1])/2.0;
					else
						result = (A[result_idx]+B[cutLeftB-1])/2.0;
				else
					result = A[result_idx];
			}
			else {
				int result_idx = half_len - cutLeftA;
				if (modified)
					if (B[result_idx-1] > A[cutLeftA-1])
						result = (B[result_idx]+B[result_idx-1])/2.0;
					else
						result = (B[result_idx]+A[cutLeftA-1])/2.0;
				else
					result = B[result_idx];
			}

			return result;
		}
};

//double findMedianSortedArrays(int A[], int m, int B[], int n) {
//	int start_A = 0, start_B = 0, len_A = m, len_B = n, mid_A, mid_B;
//	int prev_len_A, prev_len_B;
//	int nToRight, nToLeft;
//	int total_len = m+n;
//	int half_len = (total_len-1)/2;
//	bool in_array = ((total_len-1) % 2 == 0);


//	//cerr << "total_len = " << total_len << '\t' << "to left/right = " << half_len << endl;

//	//cerr << "s_A" << '\t' << "l_A" << '\t' << "m_A" << '\t' << "mAVal" << '\t' << "s_B" << '\t' << "l_B" << '\t' << "m_B" << '\t' << "mBVal" << '\t' << "toL" << '\t' << "toR" << endl;
//	do {
//		prev_len_A = len_A, prev_len_B = len_B;

//		mid_A = start_A + len_A/2;
//		mid_B = start_B + len_B/2;


//		nToRight = m - (mid_A+1) + n - (mid_B+1);
//		nToLeft = mid_A + mid_B;

//		//cerr << start_A << '\t' << len_A << '\t' << mid_A << '\t' << A[mid_A] << '\t' << start_B << '\t' << len_B << '\t' << mid_B << '\t' << B[mid_B] << '\t' << nToLeft << '\t' << nToRight << endl;

//		if (A[mid_A] > B[mid_B]) {
//			if (nToRight < half_len) {
//				len_A = mid_A - start_A;
//				nToRight++;
//			}
//			else
//				if (nToRight == half_len)
//					len_A = mid_A - start_A + 1;

//			if (nToLeft < half_len) {
//				int t_start_B = start_B;
//				start_B = mid_B+1;
//				len_B = len_B - (mid_B-t_start_B+1);
//				nToLeft++;
//			}
//			else
//				if (nToLeft == half_len) {
//					int t_start_B = start_B;
//					start_B = mid_B;
//					len_B = len_B - (mid_B-t_start_B);
//				}
//		}
//		else {
//			if (nToRight < half_len) {
//				len_B = mid_B - start_B;
//				nToRight++;
//			}
//			else
//				if (nToRight == half_len)
//					len_B = mid_B - start_B + 1;

//			if (nToLeft < half_len) {
//				int t_start_A = start_A;
//				start_A = mid_A+1;
//				len_A = len_A - (mid_A-t_start_A+1);
//				nToLeft++;
//			}
//			else
//				if (nToLeft == half_len) {
//					int t_start_A = start_A;
//					start_A = mid_A;
//					len_A = len_A - (mid_A-t_start_A);
//				}
//		}

//	} while (prev_len_A != len_A || prev_len_B != len_B);

//	assert (len_A <= 2 && len_B <= 2);

//	if (len_A == 0) {
//		assert(len_B != 0);

//		if (len_B == 1)
//			return B[start_B];
//		else // 2
//			return (B[start_B] + B[start_B+1])/2.0;
//	}
//	else
//		if (len_A == 1) {
//			if (len_B == 0)
//				return A[start_A];
//			else
//				if (len_B == 1) {
//					if (in_arr) {
//						if (A[start_A] > B[start_B])
//							if (nToRight == half_len)
//								return A[start_A];
//							else
//								return B[start_B];
//						else
//							if (nToRight == half_len)
//								return B[start_B];
//							else
//								return A[start_A];
//					}
//					else
//						return (A[start_A] + B[start_B])/2.0;
//				}
//				else { //len_A == 1, len_B == 2
//					if (A[start_A] < 
//				}
//		}
//	if (len_A == 1)
//		return A[start_A]+0.0;

//	if (len_B == 1)
//		return B[start_B]+0.0;

//	if (B[start_B] <= A[start_A])
//		if (B[start_B+len_B-1] <= A[start_A+len_A-1])
//			return (A[start_A] + B[start_B+len_B-1])/2.0;
//		else
//			return (A[start_A] + A[start_A+len_A-1])/2.0;
//	else
//		if (A[start_A+len_A-1] <= B[start_B+len_B-1])
//			return (B[start_B] + A[start_A+len_A-1])/2.0;
//		else
//			return (B[start_B] + B[start_B+len_B-1])/2.0;
//}
//};


//int main() {
//	int m, n;
//
//	const int vrange = 20;
//	const int lrange = 7;
//
//	for (int j=0; j<1000; j++) {
//		m = rand() % lrange;
//		n = rand() % lrange;
//
//		if (m == 0 && n == 0)
//			continue;
//
//		int *A = new int [m];
//		int *B = new int [n];
//
//		for (int i=0; i<m; i++) {
//			A[i] = rand() % vrange;
//		}
//
//		sort(A, A+m);
//
//		for (int i=0; i<m; i++)
//			cout << A[i] << ' ';
//		cout << endl;
//
//		for (int i=0; i<n; i++) {
//			B[i] = rand() % vrange;
//		}
//
//		sort(B, B+n);
//
//		for (int i=0; i<n; i++)
//			cout << B[i] << ' ';
//		cout << endl;
//
//		int *C = new int[m+n];
//		copy(A, A+m, C);
//		copy(B, B+n, C+m);
//		sort(C, C+m+n);
//
//		for (int i=0; i<m+n; i++)
//			cout << C[i] << ' ';
//
//		cout << endl;
//
//		Solution sol;
//
//		int median = sol.findMedianSortedArrays(A, m, B, n);
//
//		int real_median = (((m+n)%2)?C[(m+n)/2]:(C[(m+n)/2-1]+C[(m+n)/2])/2);
//		cout << median << ' ' << real_median << endl;
//
//		if (median != real_median) {
//			cout << "wrong" << endl;
//			break;
//		}
//
//		cout << "-------------------------" << endl;
//
//	}
//
//	return 0;
//}
int main() {
	
	int m, n;
	int *A, *B;

	cin >> m;

	A = new int [m];

	for (int i=0; i<m; i++)
		cin >> A[i];

	cin >> n;

	B = new int [n];

	for (int i=0; i<n; i++)
		cin >> B[i];

	Solution sol;

	cout << sol.findMedianSortedArrays(A, m, B, n) << endl;

	return 0;
}
