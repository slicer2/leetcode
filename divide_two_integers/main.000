#include <iostream>
#include <cstdlib>
#include <climits>

using namespace std;

class Solution {
	// a is more polar than b
	bool polar1(int a, int b) {
		if (a < 0)
			return (a < b);
		else
			return (a > b);
	}


	// 2b is more polar than a
	bool polar2(int b, int a) {
		if (a < 0)
			return (b < ((a+1) >> 1));
		else
			return (b > (a >> 1));
	}

	public:
	int divide(int dividend, int divisor) {
		if (dividend == 0)
			return 0;

		int prod, incProd, quotient, incQuotient;

		if (dividend > 0) {
			if (divisor > 0) {
				if (divisor > dividend)
					return 0;
				else {
					prod = divisor;
					quotient = 1;
				}
			}
			else {
				if (divisor < -dividend)
					return 0;
				else {
					prod = -divisor;
					quotient = -1;
				}
			}
		}
		else {
			if (divisor > 0) {
				if (-divisor < dividend)
					return 0;
				else {
					prod = -divisor;
					quotient = -1;
				}
			}
			else {
				if (divisor < dividend)
					return 0;
				else {
					prod = divisor;
					quotient = 1;
				}
			}
		}

		while (!polar2(prod, dividend)) {
			prod <<= 1;
			quotient <<= 1;
		}

		//cerr << "prod = " << prod << "  quotient = " << quotient << endl;
		incProd = prod;
		incQuotient = quotient;

		while (incQuotient < -1 || incQuotient > 1) {
			if (!polar1(prod, dividend-incProd)) {
				prod += incProd;
				quotient += incQuotient;
			}

			incProd >>= 1;
			incQuotient >>= 1;

			//cerr << "incProd = " << incProd << "  incQuotient = " << incQuotient << endl;
		}

		if (!polar1(prod, dividend-incProd)) {
			prod += incProd;
			quotient += incQuotient;
		}

		return quotient;
	}
};

int main() {
	int dividend, divisor;
	cin >> dividend >> divisor;

	//cout << INT_MAX << "   " << INT_MIN << endl;
	//cout << "-5/-2 = " << (-5)/(-2) << endl;
	//cout << "-5 /2 = " << (-5) / 2 << endl;
	//cout << "5/-2 = " << 5/(-2) << endl;
	//cout << "-1>>1 = " << ((-1)>>1) << endl;
	//cout << "5>>1 = " << (5 >> 1) << endl;

	Solution sol;

	cout << sol.divide(dividend, divisor) << endl;

	return 0;
}
